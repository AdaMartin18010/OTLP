# 05-attributes-processing.yaml
# 
# 高级属性处理配置 - 数据转换、清洗、增强
# 
# 功能:
# - PII数据脱敏（哈希、删除）
# - 属性重命名和转换
# - 条件过滤和路由
# - 正则提取和转换
# 
# 适用场景: 合规要求高、需要复杂数据处理的场景

receivers:
  otlp/grpc:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
  
  otlp/http:
    protocols:
      http:
        endpoint: 0.0.0.0:4318

processors:
  batch:
    timeout: 1s
    send_batch_size: 512

  memory_limiter:
    check_interval: 1s
    limit_mib: 1024

  # 1. 敏感数据删除
  attributes/remove_sensitive:
    actions:
      # HTTP headers
      - key: http.request.header.authorization
        action: delete
      
      - key: http.request.header.cookie
        action: delete
      
      - key: http.request.header.x-api-key
        action: delete
      
      # 数据库
      - key: db.statement
        action: delete  # 可能包含敏感查询
      
      # 自定义敏感字段
      - key: credit_card.number
        action: delete
      
      - key: user.password
        action: delete

  # 2. PII数据哈希化
  attributes/hash_pii:
    actions:
      # 用户标识信息
      - key: user.email
        action: hash
      
      - key: user.phone
        action: hash
      
      - key: user.ssn
        action: hash
      
      # IP地址（GDPR要求）
      - key: client.ip
        action: hash
      
      # 设备标识
      - key: device.id
        action: hash

  # 3. 属性重命名（向后兼容）
  attributes/rename:
    actions:
      # HTTP v1.21 → v1.23 migration
      - key: http.method
        action: update
        from_attribute: http.request.method
      
      - key: http.status_code
        action: update
        from_attribute: http.response.status_code
      
      - key: http.target
        action: update
        from_attribute: url.path
      
      # 自定义重命名
      - key: myapp.user_tier
        action: update
        from_attribute: myapp.user.tier

  # 4. 正则提取和转换
  attributes/extract:
    actions:
      # 从URL提取API版本
      - key: http.target
        pattern: ^/api/v(\d+)/.*
        action: extract
        to_attribute: api.version
      
      # 从user-agent提取浏览器类型
      - key: http.user_agent
        pattern: ^(Chrome|Firefox|Safari|Edge).*
        action: extract
        to_attribute: browser.type
      
      # 从订单ID提取年份
      - key: myshop.order.id
        pattern: ORDER-(\d{4})-.*
        action: extract
        to_attribute: myshop.order.year

  # 5. 条件属性插入
  attributes/conditional_insert:
    actions:
      # 添加环境标签
      - key: deployment.environment
        value: "production"
        action: insert
      
      # 添加集群信息
      - key: cluster.name
        value: "us-east-1-prod"
        action: insert
      
      # 添加数据分类
      - key: data.classification
        value: "confidential"
        action: insert

  # 6. 属性值转换
  attributes/transform:
    actions:
      # HTTP method大写
      - key: http.method
        action: convert
        converted_type: string
        
      # 金额取整（减少基数）
      - key: myshop.order.total_amount
        action: convert
        converted_type: int
      
      # 布尔值标准化
      - key: fintech.fraud.detected
        action: convert
        converted_type: bool

  # 7. Filter处理器 - 条件过滤
  filter/exclude_health_checks:
    # 排除健康检查请求
    traces:
      span:
        - 'attributes["http.route"] == "/health"'
        - 'attributes["http.route"] == "/actuator/health"'
        - 'attributes["http.route"] == "/readyz"'
        - 'attributes["http.route"] == "/livez"'

  # 8. Resource处理器 - 资源属性处理
  resource:
    attributes:
      # 合并service namespace
      - key: service.namespace
        value: "production"
        action: upsert
      
      # 从环境变量获取
      - key: deployment.region
        value: "${DEPLOYMENT_REGION}"
        action: insert
      
      # 删除不需要的resource属性
      - key: process.command_args
        action: delete
      
      # 重命名resource属性
      - key: cloud.provider
        from_attribute: cloud.platform
        action: extract

  # 9. Transform处理器 - 复杂转换（需要contrib版本）
  transform:
    # Trace转换
    traces:
      # 标准化HTTP状态码为字符串
      - context: span
        statements:
          - set(attributes["http.status_code_str"], Format("%d", attributes["http.status_code"]))
      
      # 计算派生属性
      - context: span
        statements:
          # 是否成功
          - set(attributes["request.success"], attributes["http.status_code"] < 400)
          
          # 是否服务端错误
          - set(attributes["request.server_error"], attributes["http.status_code"] >= 500)
      
      # 金融交易分类
      - context: span
        statements:
          # 高额交易标记
          - set(attributes["fintech.transaction.category"], 
                attributes["fintech.transaction.amount"] > 10000 ? "high_value" : "standard")

exporters:
  jaeger:
    endpoint: jaeger:14250
    tls:
      insecure: true
  
  logging:
    loglevel: debug  # 调试时查看转换结果

service:
  pipelines:
    traces:
      receivers: [otlp/grpc, otlp/http]
      processors: [
        memory_limiter,
        attributes/remove_sensitive,      # 1. 删除敏感数据
        attributes/hash_pii,              # 2. PII哈希
        attributes/rename,                # 3. 属性重命名
        attributes/extract,               # 4. 正则提取
        attributes/conditional_insert,    # 5. 条件插入
        attributes/transform,             # 6. 值转换
        filter/exclude_health_checks,     # 7. 过滤健康检查
        resource,                         # 8. Resource处理
        transform,                        # 9. 复杂转换
        batch
      ]
      exporters: [jaeger, logging]
  
  telemetry:
    logs:
      level: debug

# 处理示例:
# 
# 输入Span:
#   http.request.method: "POST"
#   http.response.status_code: 200
#   http.target: "/api/v2/orders"
#   user.email: "user@example.com"
#   credit_card.number: "1234-5678-9012-3456"
#   myshop.order.id: "ORDER-2024-001234"
#   myshop.order.total_amount: 99.99
# 
# 处理流程:
#   1. remove_sensitive: 删除 credit_card.number
#   2. hash_pii: user.email → "a1b2c3d4e5f6..." (SHA256)
#   3. rename: http.request.method → http.method
#   4. extract: "/api/v2/orders" → api.version="2"
#   5. extract: "ORDER-2024-001234" → myshop.order.year="2024"
#   6. transform: myshop.order.total_amount → 100 (取整)
#   7. conditional_insert: 添加 deployment.environment="production"
#   8. transform: 计算 request.success=true (status < 400)
# 
# 输出Span:
#   http.method: "POST"
#   http.status_code: 200
#   http.status_code_str: "200"
#   http.target: "/api/v2/orders"
#   api.version: "2"
#   user.email: "a1b2c3d4e5f6..." (哈希)
#   myshop.order.id: "ORDER-2024-001234"
#   myshop.order.year: "2024"
#   myshop.order.total_amount: 100
#   deployment.environment: "production"
#   request.success: true
#   request.server_error: false
# 
# 最佳实践:
#   ✅ PII数据必须脱敏（GDPR/CCPA要求）
#   ✅ 信用卡、SSN等必须删除（PCI-DSS要求）
#   ✅ 健康检查请求应过滤（减少噪音）
#   ✅ 属性标准化（方便查询和聚合）
#   ✅ 派生属性提前计算（减少查询计算）

