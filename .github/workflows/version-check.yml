name: OTLP 2025 版本检查

on:
  schedule:
    - cron: '0 9 * * 1'  # 每周一上午9点
  workflow_dispatch:
    inputs:
      language:
        description: '检查语言 (all, rust, go, js)'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - rust
        - go
        - js
  push:
    branches: [ main ]
    paths:
      - 'examples/**'
      - 'Cargo.toml'
      - 'go.mod'
      - 'package.json'

jobs:
  version-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [rust, go, js]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置 Rust
      if: matrix.language == 'rust'
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        
    - name: 设置 Go
      if: matrix.language == 'go'
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: 设置 Node.js
      if: matrix.language == 'js'
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: examples/minimal-javascript/package-lock.json
        
    - name: 检查 Rust 版本
      if: matrix.language == 'rust'
      run: |
        echo "🔍 检查 Rust 版本..."
        rustc --version
        cargo --version
        
        echo "📦 检查 OpenTelemetry Rust 依赖..."
        cd examples/minimal-rust
        cargo tree --depth 1 | grep opentelemetry
        
    - name: 检查 Go 版本
      if: matrix.language == 'go'
      run: |
        echo "🔍 检查 Go 版本..."
        go version
        
        echo "📦 检查 OpenTelemetry Go 依赖..."
        cd examples/minimal-go
        go list -m all | grep opentelemetry
        
    - name: 检查 JavaScript 版本
      if: matrix.language == 'js'
      run: |
        echo "🔍 检查 JavaScript 版本..."
        node --version
        npm --version
        
        echo "📦 检查 OpenTelemetry JavaScript 依赖..."
        cd examples/minimal-javascript
        npm list --depth=0 | grep opentelemetry
        
    - name: 生成版本报告
      run: |
        echo "# OTLP 2025 版本检查报告" > version-report.md
        echo "**生成时间**: $(date)" >> version-report.md
        echo "**语言**: ${{ matrix.language }}" >> version-report.md
        echo "" >> version-report.md
        
        if [ "${{ matrix.language }}" = "rust" ]; then
          echo "## Rust 版本" >> version-report.md
          rustc --version >> version-report.md
          cargo --version >> version-report.md
        elif [ "${{ matrix.language }}" = "go" ]; then
          echo "## Go 版本" >> version-report.md
          go version >> version-report.md
        elif [ "${{ matrix.language }}" = "js" ]; then
          echo "## JavaScript 版本" >> version-report.md
          node --version >> version-report.md
          npm --version >> version-report.md
        fi
        
    - name: 上传版本报告
      uses: actions/upload-artifact@v3
      with:
        name: version-report-${{ matrix.language }}
        path: version-report.md
        
    - name: 检查版本兼容性
      run: |
        echo "🔍 检查版本兼容性..."
        
        # 检查 Rust 版本兼容性
        if [ "${{ matrix.language }}" = "rust" ]; then
          cd examples/minimal-rust
          cargo check --quiet
          echo "✅ Rust 版本兼容性检查通过"
        fi
        
        # 检查 Go 版本兼容性
        if [ "${{ matrix.language }}" = "go" ]; then
          cd examples/minimal-go
          go mod tidy
          go build -o /dev/null .
          echo "✅ Go 版本兼容性检查通过"
        fi
        
        # 检查 JavaScript 版本兼容性
        if [ "${{ matrix.language }}" = "js" ]; then
          cd examples/minimal-javascript
          npm ci
          npm run build 2>/dev/null || echo "⚠️ 无构建脚本，跳过构建检查"
          echo "✅ JavaScript 版本兼容性检查通过"
        fi
        
    - name: 安全扫描
      run: |
        echo "🔒 执行安全扫描..."
        
        if [ "${{ matrix.language }}" = "rust" ]; then
          cd examples/minimal-rust
          cargo audit --deny warnings || echo "⚠️ 发现安全漏洞，请检查"
        elif [ "${{ matrix.language }}" = "go" ]; then
          cd examples/minimal-go
          go list -json -deps . | nancy sleuth || echo "⚠️ 发现安全漏洞，请检查"
        elif [ "${{ matrix.language }}" = "js" ]; then
          cd examples/minimal-javascript
          npm audit --audit-level moderate || echo "⚠️ 发现安全漏洞，请检查"
        fi
        
    - name: 性能基准测试
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "⚡ 执行性能基准测试..."
        
        if [ "${{ matrix.language }}" = "rust" ]; then
          cd examples/minimal-rust
          cargo bench --quiet || echo "⚠️ 无基准测试，跳过"
        elif [ "${{ matrix.language }}" = "go" ]; then
          cd examples/minimal-go
          go test -bench=. -benchmem || echo "⚠️ 无基准测试，跳过"
        elif [ "${{ matrix.language }}" = "js" ]; then
          cd examples/minimal-javascript
          npm run benchmark || echo "⚠️ 无基准测试，跳过"
        fi

  summary:
    runs-on: ubuntu-latest
    needs: version-check
    if: always()
    
    steps:
    - name: 下载所有版本报告
      uses: actions/download-artifact@v3
      
    - name: 生成汇总报告
      run: |
        echo "# OTLP 2025 版本检查汇总报告" > summary-report.md
        echo "**生成时间**: $(date)" >> summary-report.md
        echo "**工作流**: ${{ github.workflow }}" >> summary-report.md
        echo "**提交**: ${{ github.sha }}" >> summary-report.md
        echo "" >> summary-report.md
        
        echo "## 检查结果" >> summary-report.md
        echo "- Rust: ${{ needs.version-check.result }}" >> summary-report.md
        echo "- Go: ${{ needs.version-check.result }}" >> summary-report.md
        echo "- JavaScript: ${{ needs.version-check.result }}" >> summary-report.md
        echo "" >> summary-report.md
        
        echo "## 建议" >> summary-report.md
        echo "1. 定期更新 OpenTelemetry 依赖到最新稳定版本" >> summary-report.md
        echo "2. 关注安全公告和兼容性更新" >> summary-report.md
        echo "3. 在生产环境中固定次要版本号" >> summary-report.md
        echo "4. 启用依赖版本锁定机制" >> summary-report.md
        
    - name: 上传汇总报告
      uses: actions/upload-artifact@v3
      with:
        name: version-check-summary
        path: summary-report.md
        
    - name: 评论 PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('summary-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🔍 版本检查结果\n\n${summary}`
          });
