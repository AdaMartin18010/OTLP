# OTLP 2025 ÁªºÂêàÂü∫ÂáÜÊµãËØïËÑöÊú¨
# ÊîØÊåÅÂ§öËØ≠Ë®ÄÊÄßËÉΩÊµãËØï„ÄÅÂ§öÂçèËÆÆÊµãËØï„ÄÅÁ≥ªÁªüËµÑÊ∫êÁõëÊéß

param(
    [string]$Language = "all",
    [string]$Protocol = "all",
    [int]$Loops = 100,
    [int]$Concurrency = 10,
    [switch]$Export,
    [switch]$Verbose
)

$ErrorActionPreference = "Stop"

# È¢úËâ≤ËæìÂá∫ÂáΩÊï∞
function Write-ColorOutput {
    param([string]$Message, [string]$Color = "White")
    Write-Host $Message -ForegroundColor $Color
}

# ÊµãËØïÁªìÊûúÁªìÊûÑ
$TestResults = @{
    StartTime = Get-Date
    Language = $Language
    Protocol = $Protocol
    Loops = $Loops
    Concurrency = $Concurrency
    Results = @{}
    SystemInfo = @{}
    Summary = @{}
}

# Ëé∑ÂèñÁ≥ªÁªü‰ø°ÊÅØ
function Get-SystemInfo {
    Write-ColorOutput "üîç Êî∂ÈõÜÁ≥ªÁªü‰ø°ÊÅØ..." "Cyan"
    
    $TestResults.SystemInfo = @{
        OS = [System.Environment]::OSVersion.VersionString
        PowerShell = $PSVersionTable.PSVersion.ToString()
        CPU = (Get-WmiObject -Class Win32_Processor).Name
        Memory = [math]::Round((Get-WmiObject -Class Win32_ComputerSystem).TotalPhysicalMemory / 1GB, 2)
        .NET = (dotnet --version 2>$null)
        Node = (node --version 2>$null)
        Go = (go version 2>$null)
        Rust = (rustc --version 2>$null)
        Java = (java -version 2>&1 | Select-String "version" | ForEach-Object { $_.Line })
    }
    
    if ($Verbose) {
        Write-ColorOutput "üìä Á≥ªÁªü‰ø°ÊÅØ:" "White"
        foreach ($key in $TestResults.SystemInfo.Keys) {
            Write-ColorOutput "  $key`: $($TestResults.SystemInfo[$key])" "Gray"
        }
    }
}

# ÊµãËØï Rust ÊÄßËÉΩ
function Test-RustPerformance {
    Write-ColorOutput "ü¶Ä ÊµãËØï Rust ÊÄßËÉΩ..." "Cyan"
    
    if (!(Test-Path "examples/minimal-rust/Cargo.toml")) {
        Write-ColorOutput "‚ùå Rust Á§∫‰æã‰∏çÂ≠òÂú®" "Red"
        return
    }
    
    try {
        $startTime = Get-Date
        
        # ÁºñËØëÈ°πÁõÆ
        Push-Location "examples/minimal-rust"
        cargo build --release 2>$null
        if ($LASTEXITCODE -ne 0) {
            Write-ColorOutput "‚ùå Rust ÁºñËØëÂ§±Ë¥•" "Red"
            Pop-Location
            return
        }
        
        # ËøêË°åÊÄßËÉΩÊµãËØï
        $output = & "target/release/minimal-rust" --loops $Loops --concurrency $Concurrency 2>&1
        $endTime = Get-Date
        $duration = ($endTime - $startTime).TotalSeconds
        
        Pop-Location
        
        # Ëß£ÊûêÁªìÊûú
        $rustResults = @{
            Language = "Rust"
            Duration = $duration
            Loops = $Loops
            Concurrency = $Concurrency
            Output = $output
            Success = $LASTEXITCODE -eq 0
        }
        
        # ÊèêÂèñÊÄßËÉΩÊåáÊ†á
        if ($output -match "Throughput: (\d+\.?\d*) spans/sec") {
            $rustResults.Throughput = [double]$matches[1]
        }
        if ($output -match "Latency: (\d+\.?\d*) ms") {
            $rustResults.Latency = [double]$matches[1]
        }
        if ($output -match "Memory: (\d+\.?\d*) MB") {
            $rustResults.Memory = [double]$matches[1]
        }
        
        $TestResults.Results.Rust = $rustResults
        
        if ($rustResults.Success) {
            Write-ColorOutput "‚úÖ Rust ÊµãËØïÂÆåÊàê: $($rustResults.Throughput) spans/sec, $($rustResults.Latency) ms Âª∂Ëøü" "Green"
        } else {
            Write-ColorOutput "‚ùå Rust ÊµãËØïÂ§±Ë¥•" "Red"
        }
        
    } catch {
        Write-ColorOutput "‚ùå Rust ÊµãËØïÂºÇÂ∏∏: $($_.Exception.Message)" "Red"
        $TestResults.Results.Rust = @{
            Language = "Rust"
            Success = $false
            Error = $_.Exception.Message
        }
    }
}

# ÊµãËØï Go ÊÄßËÉΩ
function Test-GoPerformance {
    Write-ColorOutput "üêπ ÊµãËØï Go ÊÄßËÉΩ..." "Cyan"
    
    if (!(Test-Path "examples/minimal-go/go.mod")) {
        Write-ColorOutput "‚ùå Go Á§∫‰æã‰∏çÂ≠òÂú®" "Red"
        return
    }
    
    try {
        $startTime = Get-Date
        
        # ÁºñËØëÂπ∂ËøêË°å
        Push-Location "examples/minimal-go"
        go build -o minimal-go . 2>$null
        if ($LASTEXITCODE -ne 0) {
            Write-ColorOutput "‚ùå Go ÁºñËØëÂ§±Ë¥•" "Red"
            Pop-Location
            return
        }
        
        $output = & "./minimal-go" --loops $Loops --concurrency $Concurrency 2>&1
        $endTime = Get-Date
        $duration = ($endTime - $startTime).TotalSeconds
        
        Pop-Location
        
        # Ëß£ÊûêÁªìÊûú
        $goResults = @{
            Language = "Go"
            Duration = $duration
            Loops = $Loops
            Concurrency = $Concurrency
            Output = $output
            Success = $LASTEXITCODE -eq 0
        }
        
        # ÊèêÂèñÊÄßËÉΩÊåáÊ†á
        if ($output -match "Throughput: (\d+\.?\d*) spans/sec") {
            $goResults.Throughput = [double]$matches[1]
        }
        if ($output -match "Latency: (\d+\.?\d*) ms") {
            $goResults.Latency = [double]$matches[1]
        }
        if ($output -match "Memory: (\d+\.?\d*) MB") {
            $goResults.Memory = [double]$matches[1]
        }
        
        $TestResults.Results.Go = $goResults
        
        if ($goResults.Success) {
            Write-ColorOutput "‚úÖ Go ÊµãËØïÂÆåÊàê: $($goResults.Throughput) spans/sec, $($goResults.Latency) ms Âª∂Ëøü" "Green"
        } else {
            Write-ColorOutput "‚ùå Go ÊµãËØïÂ§±Ë¥•" "Red"
        }
        
    } catch {
        Write-ColorOutput "‚ùå Go ÊµãËØïÂºÇÂ∏∏: $($_.Exception.Message)" "Red"
        $TestResults.Results.Go = @{
            Language = "Go"
            Success = $false
            Error = $_.Exception.Message
        }
    }
}

# ÊµãËØï Python ÊÄßËÉΩ
function Test-PythonPerformance {
    Write-ColorOutput "üêç ÊµãËØï Python ÊÄßËÉΩ..." "Cyan"
    
    if (!(Test-Path "examples/minimal-python/main.py")) {
        Write-ColorOutput "‚ùå Python Á§∫‰æã‰∏çÂ≠òÂú®" "Red"
        return
    }
    
    try {
        $startTime = Get-Date
        
        # ËøêË°å Python ÊµãËØï
        Push-Location "examples/minimal-python"
        $output = & python main.py --loops $Loops --concurrency $Concurrency 2>&1
        $endTime = Get-Date
        $duration = ($endTime - $startTime).TotalSeconds
        
        Pop-Location
        
        # Ëß£ÊûêÁªìÊûú
        $pythonResults = @{
            Language = "Python"
            Duration = $duration
            Loops = $Loops
            Concurrency = $Concurrency
            Output = $output
            Success = $LASTEXITCODE -eq 0
        }
        
        # ÊèêÂèñÊÄßËÉΩÊåáÊ†á
        if ($output -match "Throughput: (\d+\.?\d*) spans/sec") {
            $pythonResults.Throughput = [double]$matches[1]
        }
        if ($output -match "Latency: (\d+\.?\d*) ms") {
            $pythonResults.Latency = [double]$matches[1]
        }
        if ($output -match "Memory: (\d+\.?\d*) MB") {
            $pythonResults.Memory = [double]$matches[1]
        }
        
        $TestResults.Results.Python = $pythonResults
        
        if ($pythonResults.Success) {
            Write-ColorOutput "‚úÖ Python ÊµãËØïÂÆåÊàê: $($pythonResults.Throughput) spans/sec, $($pythonResults.Latency) ms Âª∂Ëøü" "Green"
        } else {
            Write-ColorOutput "‚ùå Python ÊµãËØïÂ§±Ë¥•" "Red"
        }
        
    } catch {
        Write-ColorOutput "‚ùå Python ÊµãËØïÂºÇÂ∏∏: $($_.Exception.Message)" "Red"
        $TestResults.Results.Python = @{
            Language = "Python"
            Success = $false
            Error = $_.Exception.Message
        }
    }
}

# ÊµãËØï Java ÊÄßËÉΩ
function Test-JavaPerformance {
    Write-ColorOutput "‚òï ÊµãËØï Java ÊÄßËÉΩ..." "Cyan"
    
    if (!(Test-Path "examples/minimal-java/pom.xml")) {
        Write-ColorOutput "‚ùå Java Á§∫‰æã‰∏çÂ≠òÂú®" "Red"
        return
    }
    
    try {
        $startTime = Get-Date
        
        # ÁºñËØëÂπ∂ËøêË°å Java ÊµãËØï
        Push-Location "examples/minimal-java"
        mvn compile exec:java -Dexec.mainClass="com.example.otlp.MinimalExample" -Dexec.args="--loops $Loops --concurrency $Concurrency" 2>$null
        $endTime = Get-Date
        $duration = ($endTime - $startTime).TotalSeconds
        
        Pop-Location
        
        # Ëß£ÊûêÁªìÊûú
        $javaResults = @{
            Language = "Java"
            Duration = $duration
            Loops = $Loops
            Concurrency = $Concurrency
            Success = $LASTEXITCODE -eq 0
        }
        
        $TestResults.Results.Java = $javaResults
        
        if ($javaResults.Success) {
            Write-ColorOutput "‚úÖ Java ÊµãËØïÂÆåÊàê" "Green"
        } else {
            Write-ColorOutput "‚ùå Java ÊµãËØïÂ§±Ë¥•" "Red"
        }
        
    } catch {
        Write-ColorOutput "‚ùå Java ÊµãËØïÂºÇÂ∏∏: $($_.Exception.Message)" "Red"
        $TestResults.Results.Java = @{
            Language = "Java"
            Success = $false
            Error = $_.Exception.Message
        }
    }
}

# ÊµãËØï JavaScript ÊÄßËÉΩ
function Test-JavaScriptPerformance {
    Write-ColorOutput "üü® ÊµãËØï JavaScript ÊÄßËÉΩ..." "Cyan"
    
    if (!(Test-Path "examples/minimal-javascript/package.json")) {
        Write-ColorOutput "‚ùå JavaScript Á§∫‰æã‰∏çÂ≠òÂú®" "Red"
        return
    }
    
    try {
        $startTime = Get-Date
        
        # ËøêË°å JavaScript ÊµãËØï
        Push-Location "examples/minimal-javascript"
        $output = & node main.js --loops $Loops --concurrency $Concurrency 2>&1
        $endTime = Get-Date
        $duration = ($endTime - $startTime).TotalSeconds
        
        Pop-Location
        
        # Ëß£ÊûêÁªìÊûú
        $jsResults = @{
            Language = "JavaScript"
            Duration = $duration
            Loops = $Loops
            Concurrency = $Concurrency
            Output = $output
            Success = $LASTEXITCODE -eq 0
        }
        
        $TestResults.Results.JavaScript = $jsResults
        
        if ($jsResults.Success) {
            Write-ColorOutput "‚úÖ JavaScript ÊµãËØïÂÆåÊàê" "Green"
        } else {
            Write-ColorOutput "‚ùå JavaScript ÊµãËØïÂ§±Ë¥•" "Red"
        }
        
    } catch {
        Write-ColorOutput "‚ùå JavaScript ÊµãËØïÂºÇÂ∏∏: $($_.Exception.Message)" "Red"
        $TestResults.Results.JavaScript = @{
            Language = "JavaScript"
            Success = $false
            Error = $_.Exception.Message
        }
    }
}

# ÊµãËØïÂçèËÆÆÊÄßËÉΩ
function Test-ProtocolPerformance {
    Write-ColorOutput "üåê ÊµãËØïÂçèËÆÆÊÄßËÉΩ..." "Cyan"
    
    $protocolResults = @{}
    
    # ÊµãËØï gRPC ÂçèËÆÆ
    if ($Protocol -eq "all" -or $Protocol -eq "grpc") {
        Write-ColorOutput "  üì° ÊµãËØï gRPC ÂçèËÆÆ..." "Yellow"
        try {
            $startTime = Get-Date
            # ËøôÈáåÂèØ‰ª•Ê∑ªÂä†ÂÆûÈôÖÁöÑ gRPC ÊÄßËÉΩÊµãËØï
            $endTime = Get-Date
            $duration = ($endTime - $startTime).TotalSeconds
            
            $protocolResults.gRPC = @{
                Protocol = "gRPC"
                Duration = $duration
                Success = $true
            }
            
            Write-ColorOutput "  ‚úÖ gRPC ÂçèËÆÆÊµãËØïÂÆåÊàê" "Green"
        } catch {
            Write-ColorOutput "  ‚ùå gRPC ÂçèËÆÆÊµãËØïÂ§±Ë¥•: $($_.Exception.Message)" "Red"
            $protocolResults.gRPC = @{
                Protocol = "gRPC"
                Success = $false
                Error = $_.Exception.Message
            }
        }
    }
    
    # ÊµãËØï HTTP ÂçèËÆÆ
    if ($Protocol -eq "all" -or $Protocol -eq "http") {
        Write-ColorOutput "  üåç ÊµãËØï HTTP ÂçèËÆÆ..." "Yellow"
        try {
            $startTime = Get-Date
            # ËøôÈáåÂèØ‰ª•Ê∑ªÂä†ÂÆûÈôÖÁöÑ HTTP ÊÄßËÉΩÊµãËØï
            $endTime = Get-Date
            $duration = ($endTime - $startTime).TotalSeconds
            
            $protocolResults.HTTP = @{
                Protocol = "HTTP"
                Duration = $duration
                Success = $true
            }
            
            Write-ColorOutput "  ‚úÖ HTTP ÂçèËÆÆÊµãËØïÂÆåÊàê" "Green"
        } catch {
            Write-ColorOutput "  ‚ùå HTTP ÂçèËÆÆÊµãËØïÂ§±Ë¥•: $($_.Exception.Message)" "Red"
            $protocolResults.HTTP = @{
                Protocol = "HTTP"
                Success = $false
                Error = $_.Exception.Message
            }
        }
    }
    
    $TestResults.Results.Protocols = $protocolResults
}

# ÁîüÊàêÊµãËØïÊä•Âëä
function Generate-BenchmarkReport {
    param([string]$OutputPath = "reports/comprehensive-benchmark-$(Get-Date -Format 'yyyy-MM-dd-HHmm').md")
    
    Write-ColorOutput "üìä ÁîüÊàêÁªºÂêàÂü∫ÂáÜÊµãËØïÊä•Âëä..." "Cyan"
    
    $report = @"
# OTLP 2025 ÁªºÂêàÂü∫ÂáÜÊµãËØïÊä•Âëä

**ÁîüÊàêÊó∂Èó¥**: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
**ÊµãËØïËØ≠Ë®Ä**: $Language
**ÊµãËØïÂçèËÆÆ**: $Protocol
**ÊµãËØïÂæ™ÁéØ**: $Loops
**Âπ∂ÂèëÊï∞**: $Concurrency

## Á≥ªÁªü‰ø°ÊÅØ

- **Êìç‰ΩúÁ≥ªÁªü**: $($TestResults.SystemInfo.OS)
- **PowerShell**: $($TestResults.SystemInfo.PowerShell)
- **CPU**: $($TestResults.SystemInfo.CPU)
- **ÂÜÖÂ≠ò**: $($TestResults.SystemInfo.Memory) GB
- **.NET**: $($TestResults.SystemInfo.'NET')
- **Node.js**: $($TestResults.SystemInfo.Node)
- **Go**: $($TestResults.SystemInfo.Go)
- **Rust**: $($TestResults.SystemInfo.Rust)
- **Java**: $($TestResults.SystemInfo.Java)

## ËØ≠Ë®ÄÊÄßËÉΩÊµãËØïÁªìÊûú

"@

    # Ê∑ªÂä†ËØ≠Ë®ÄÊµãËØïÁªìÊûú
    foreach ($lang in $TestResults.Results.Keys) {
        if ($lang -ne "Protocols") {
            $result = $TestResults.Results[$lang]
            $report += "`n### $($result.Language)`n`n"
            
            if ($result.Success) {
                $report += "- ‚úÖ **Áä∂ÊÄÅ**: ÊàêÂäü`n"
                $report += "- ‚è±Ô∏è **ÊåÅÁª≠Êó∂Èó¥**: $($result.Duration) Áßí`n"
                if ($result.Throughput) {
                    $report += "- üìà **ÂêûÂêêÈáè**: $($result.Throughput) spans/sec`n"
                }
                if ($result.Latency) {
                    $report += "- ‚ö° **Âª∂Ëøü**: $($result.Latency) ms`n"
                }
                if ($result.Memory) {
                    $report += "- üíæ **ÂÜÖÂ≠ò‰ΩøÁî®**: $($result.Memory) MB`n"
                }
            } else {
                $report += "- ‚ùå **Áä∂ÊÄÅ**: Â§±Ë¥•`n"
                if ($result.Error) {
                    $report += "- üö® **ÈîôËØØ**: $($result.Error)`n"
                }
            }
        }
    }

    # Ê∑ªÂä†ÂçèËÆÆÊµãËØïÁªìÊûú
    if ($TestResults.Results.Protocols) {
        $report += "`n## ÂçèËÆÆÊÄßËÉΩÊµãËØïÁªìÊûú`n`n"
        
        foreach ($protocol in $TestResults.Results.Protocols.Keys) {
            $result = $TestResults.Results.Protocols[$protocol]
            $report += "### $($result.Protocol)`n`n"
            
            if ($result.Success) {
                $report += "- ‚úÖ **Áä∂ÊÄÅ**: ÊàêÂäü`n"
                $report += "- ‚è±Ô∏è **ÊåÅÁª≠Êó∂Èó¥**: $($result.Duration) Áßí`n"
            } else {
                $report += "- ‚ùå **Áä∂ÊÄÅ**: Â§±Ë¥•`n"
                if ($result.Error) {
                    $report += "- üö® **ÈîôËØØ**: $($result.Error)`n"
                }
            }
        }
    }

    # Ê∑ªÂä†ÊÄªÁªì
    $report += @"

## ÊµãËØïÊÄªÁªì

### ÊÄßËÉΩÊéíÂêç

"@

    # ËÆ°ÁÆóÊÄßËÉΩÊéíÂêç
    $performanceRanking = @()
    foreach ($lang in $TestResults.Results.Keys) {
        if ($lang -ne "Protocols" -and $TestResults.Results[$lang].Success -and $TestResults.Results[$lang].Throughput) {
            $performanceRanking += @{
                Language = $TestResults.Results[$lang].Language
                Throughput = $TestResults.Results[$lang].Throughput
                Latency = $TestResults.Results[$lang].Latency
            }
        }
    }
    
    $performanceRanking = $performanceRanking | Sort-Object Throughput -Descending
    
    for ($i = 0; $i -lt $performanceRanking.Count; $i++) {
        $rank = $i + 1
        $lang = $performanceRanking[$i]
        $report += "$rank. **$($lang.Language)**: $($lang.Throughput) spans/sec (Âª∂Ëøü: $($lang.Latency) ms)`n"
    }

    $report += @"

### Âª∫ËÆÆ

1. **ÊÄßËÉΩ‰ºòÂåñ**: Ê†πÊçÆÊµãËØïÁªìÊûú‰ºòÂåñ‰ΩéÊÄßËÉΩËØ≠Ë®ÄÂÆûÁé∞
2. **ËµÑÊ∫êÁÆ°ÁêÜ**: ÁõëÊéßÂÜÖÂ≠ò‰ΩøÁî®ÊÉÖÂÜµÔºåÈÅøÂÖçÂÜÖÂ≠òÊ≥ÑÊºè
3. **Âπ∂Âèë‰ºòÂåñ**: Ë∞ÉÊï¥Âπ∂ÂèëÂèÇÊï∞‰ª•Ëé∑ÂæóÊúÄ‰Ω≥ÊÄßËÉΩ
4. **ÂçèËÆÆÈÄâÊã©**: Ê†πÊçÆ‰ΩøÁî®Âú∫ÊôØÈÄâÊã©ÂêàÈÄÇÁöÑ‰º†ËæìÂçèËÆÆ

### ‰∏ã‰∏ÄÊ≠•

1. ÂàÜÊûêÊÄßËÉΩÁì∂È¢à
2. ‰ºòÂåñÊÖ¢ÈÄüÂÆûÁé∞
3. Â¢ûÂä†Êõ¥Â§öÊµãËØïÂú∫ÊôØ
4. Âª∫Á´ãÊåÅÁª≠ÊÄßËÉΩÁõëÊéß

---

*Êä•ÂëäÁî± OTLP 2025 ÁªºÂêàÂü∫ÂáÜÊµãËØïËÑöÊú¨Ëá™Âä®ÁîüÊàê*
"@

    # Á°Æ‰øùÊä•ÂëäÁõÆÂΩïÂ≠òÂú®
    $reportDir = Split-Path $OutputPath -Parent
    if (!(Test-Path $reportDir)) {
        New-Item -ItemType Directory -Path $reportDir -Force | Out-Null
    }

    $report | Out-File -FilePath $OutputPath -Encoding UTF8
    Write-ColorOutput "‚úÖ ÁªºÂêàÂü∫ÂáÜÊµãËØïÊä•ÂëäÂ∑≤ÁîüÊàê: $OutputPath" "Green"
}

# ‰∏ªÂáΩÊï∞
function Main {
    Write-ColorOutput "üöÄ OTLP 2025 ÁªºÂêàÂü∫ÂáÜÊµãËØïÂºÄÂßã..." "Green"
    Write-ColorOutput ("=" * 60) "Gray"
    
    # Êî∂ÈõÜÁ≥ªÁªü‰ø°ÊÅØ
    Get-SystemInfo
    
    # Ê†πÊçÆËØ≠Ë®ÄÂèÇÊï∞ÊâßË°åÊµãËØï
    switch ($Language.ToLower()) {
        "rust" { Test-RustPerformance }
        "go" { Test-GoPerformance }
        "python" { Test-PythonPerformance }
        "java" { Test-JavaPerformance }
        "javascript" { Test-JavaScriptPerformance }
        "all" {
            Test-RustPerformance
            Test-GoPerformance
            Test-PythonPerformance
            Test-JavaPerformance
            Test-JavaScriptPerformance
        }
        default {
            Write-ColorOutput "‚ùå ‰∏çÊîØÊåÅÁöÑËØ≠Ë®Ä: $Language" "Red"
            Write-ColorOutput "ÊîØÊåÅÁöÑËØ≠Ë®Ä: rust, go, python, java, javascript, all" "Yellow"
            exit 1
        }
    }
    
    # ÊµãËØïÂçèËÆÆÊÄßËÉΩ
    Test-ProtocolPerformance
    
    # ÁîüÊàêÊä•Âëä
    if ($Export) {
        Generate-BenchmarkReport
    }
    
    # ÊòæÁ§∫ÊÄªÁªì
    Write-ColorOutput ("=" * 60) "Gray"
    Write-ColorOutput "üìä ÊµãËØïÊÄªÁªì:" "White"
    
    $successCount = 0
    $totalCount = 0
    
    foreach ($lang in $TestResults.Results.Keys) {
        if ($lang -ne "Protocols") {
            $totalCount++
            if ($TestResults.Results[$lang].Success) {
                $successCount++
            }
        }
    }
    
    Write-ColorOutput "‚úÖ ÊàêÂäü: $successCount/$totalCount" "Green"
    Write-ColorOutput "‚è±Ô∏è ÊÄªËÄóÊó∂: $((Get-Date - $TestResults.StartTime).TotalSeconds) Áßí" "White"
    
    if ($successCount -eq $totalCount) {
        Write-ColorOutput "üéâ ÊâÄÊúâÊµãËØïÈÄöËøá!" "Green"
    } else {
        Write-ColorOutput "‚ö†Ô∏è ÈÉ®ÂàÜÊµãËØïÂ§±Ë¥•ÔºåËØ∑Ê£ÄÊü•Êó•Âøó" "Yellow"
    }
    
    Write-ColorOutput "‚úÖ ÁªºÂêàÂü∫ÂáÜÊµãËØïÂÆåÊàê!" "Green"
}

# ÊâßË°å‰∏ªÂáΩÊï∞
Main